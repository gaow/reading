#!/usr/bin/env sos-runner
#vim: set filetype=python: set expandtab : ts=4:
#fileformat=SOS1.0

# This script compiles all `*.md` files in `notes` to a website
# Filename convention: Year_FirstInitFirstAuthor_LastNameFirstAuthor_FirstInitLastAuthor_LastNameLastAuthor_*.md

[global]
parameter: data_dir = 'notes'

[theme: provides = 'website/themes/hugo-theme-learn/README.md']
parameter: version = '2.4.0'
download: dest_dir = 'website/themes', decompress=True, expand = '${ }'
  https://github.com/matcornic/hugo-theme-learn/archive/${version}.tar.gz
bash: expand = '${ }'
  rm -rf website/themes/hugo-theme-learn && mv website/themes/hugo-theme-learn-${version} website/themes/hugo-theme-learn
  rm -f website/themes/${version}.tar.gz
  echo -e """
  /* pt-sans-regular - latin */
  @font-face {
  font-family: 'PT Sans';
  font-style: normal;
  font-weight: 400;
  src: url('../fonts/pt-sans-v11-latin-regular.eot'); /* IE9 Compat Modes */
  src: local('PT Sans'), local('PTSans-Regular'),
       url('../fonts/pt-sans-v11-latin-regular.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
       url('../fonts/pt-sans-v11-latin-regular.woff2') format('woff2'), /* Super Modern Browsers */
       url('../fonts/pt-sans-v11-latin-regular.woff') format('woff'), /* Modern Browsers */
       url('../fonts/pt-sans-v11-latin-regular.ttf') format('truetype'), /* Safari, Android, iOS */
       url('../fonts/pt-sans-v11-latin-regular.svg#PTSans') format('svg'); /* Legacy iOS */
  }
  """ >> website/themes/hugo-theme-learn/static/css/theme.css
  sed -i 's/"Work Sans"/"PT Sans"/g' website/themes/hugo-theme-learn/static/css/theme.css
  echo -e '''
  <p><a href="http://tigerwang.org">Gao Wang</a> &copy; 2019+ For my personal use.</p>
  ''' > website/themes/hugo-theme-learn/layouts/partials/menu-footer.html
  echo -e '''
  <a id="loga" href="http://github.com/gaow/reading">
  <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 486.988 486.988" style="enable-background:new 0 0 486.988 486.988;" xml:space="preserve" width="48px" height="48px">
  <g> <path d="M16.822,284.968h39.667v158.667c0,9.35,7.65,17,17,17h116.167c9.35,0,17-7.65,17-17V327.468h70.833v116.167    c0,9.35,7.65,17,17,17h110.5c9.35,0,17-7.65,17-17V284.968h48.167c6.8,0,13.033-4.25,15.583-10.483    c2.55-6.233,1.133-13.6-3.683-18.417L260.489,31.385c-6.517-6.517-17.283-6.8-23.8-0.283L5.206,255.785    c-5.1,4.817-6.517,12.183-3.967,18.7C3.789,281.001,10.022,284.968,16.822,284.968z M248.022,67.368l181.333,183.6h-24.367    c-9.35,0-17,7.65-17,17v158.667h-76.5V310.468c0-9.35-7.65-17-17-17H189.656c-9.35,0-17,7.65-17,17v116.167H90.489V267.968    c0-9.35-7.65-17-17-17H58.756L248.022,67.368z" fill="#FFFFFF"/>
  </g>
  <svg>
  </a>
  ''' >  website/themes/hugo-theme-learn/layouts/partials/logo.html
  echo -e '''
  {{ if ne .Site.Params.mathjax "" }}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/{{.Site.Params.mathjax}}/MathJax.js?config=TeX-MML-AM_CHTML"></script>
  <script>
  MathJax.Hub.Config({
     extensions: ["tex2jax.js"],
     jax: ["input/TeX", "output/HTML-CSS"],
     tex2jax: {
         inlineMath: [ ["$","$"] ],
         displayMath: [ ["$$","$$"] ],
         processEscapes: true
     },
     "HTML-CSS": {
         preferredFont: "TeX",
         availableFonts: ["TeX"],
         styles: {
             scale: 110,
             ".MathJax_Display": {
                 "font-size": "110%",
             }
         }
     }
  });
  </script>

  <script type="text/x-mathjax-config">
  MathJax.Hub.Queue(function() {
    for(var all in MathJax.Hub.getAllJax()) {
        all.SourceElement().parentNode.className += " has-jax";

    }
  });
  </script>
  {{ end }} 
  ''' >> website/themes/hugo-theme-learn/layouts/partials/custom-header.html
download: dest_dir = 'website/themes/hugo-theme-learn/static/fonts', decompress=True
  https://google-webfonts-helper.herokuapp.com/api/fonts/pt-sans?download=zip&subsets=latin&variants=regular

# Update the list
[default_1]
import os, glob, re
from collections import OrderedDict
def get_data(files):
    data = {}
    for f in files:
        if os.path.basename(f) == 'README.md':
           continue
        lines = open(f).readlines()
        f = os.path.basename(f)
        first_line = lines[0]
        if not first_line.startswith('#'):
            raise ValueError(f'The first line of document "{f}" must start with "#" followed by paper/book title')
        data[f] = {}
        data[f]['full_name'] = first_line[1:].strip()
        info = f.split("_")
        data[f]['year'] = info[0]
        try:
          data[f]['name'] = f"{info[2]} {info[1]}. + {info[4]} {info[3]}."
          data[f]['html_name'] = f"{info[2]}-{info[1]}-{info[4]}-{info[3]}-{info[0]}".lower()
        except IndexError:
          data[f]['name'] = f"{info[2]} {info[1]}."
          data[f]['html_name'] = f"{info[2]}-{info[1]}-{info[0]}".lower()
        lines[0] = f"**{lines[0].strip('#').strip()}**"
        data[f]['content'] = '\n'.join(lines)
    return OrderedDict(sorted(data.items(), key = lambda i: i[1]['name'].lower()))

data = get_data(glob.glob(f'{data_dir}/*.md'))
categories = []
contents = OrderedDict()
toc = OrderedDict()
idx = 1
for k in data:
    category = data[k]['year'][:4]
    if category not in categories:
       idx = 1
       categories.append(category)
       toc[category] = '\n## {}\n\n----\n\n'.format(category)
    if category not in contents:
       contents[category] = OrderedDict() 
    toc[category] += '{}. [{}]({}) ({}), {}\n'.format(idx, data[k]['name'], data[k]['html_name'], data[k]['year'], data[k]['full_name'])
    data[k]['name'] = f"{idx}. {data[k]['name']}"
    contents[category][(data[k]['name'], data[k]['html_name'])] = data[k]['content']
    idx += 1

idx = 4
for k in contents:
    os.makedirs(f'website/content/{k.lower()}', exist_ok=True)
    with open(f'website/content/{k.lower()}/_index.md', 'w') as f:
         f.write('+++\nweight = {}\ntitle = "{}"\n+++\n\n'.format(idx, k))
         f.write(toc[k])
    idx += 1
    for num, kk in enumerate(contents[k]):
        with open(f'website/content/{k.lower()}/{kk[1]}.md', 'w') as f:
             f.write('---\ntitle: {1}\ntoc: true\nweight: {0}\n---\n\n'.format(num + 1, kk[0]))
             f.write(contents[k][kk])

with open('website/content/_index.md', 'w') as f:
     f.write('+++\nweight = 1\ntitle = "About"\n+++\n\n')
     f.write(open('README.md').read())
 
# Update gh-pages
[default_2]
depends: 'website/themes/hugo-theme-learn/README.md'
bash:
  set -e
  mkdir -p docs
  cd website
  hugo
  rsync -auz public/* ../docs/
  cd ../docs
  git add .
  git commit -m "(bot) update HTML"
  git push

[clean]
bash: workdir='website'
  rm -rf themes resources content